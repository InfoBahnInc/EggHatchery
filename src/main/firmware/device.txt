// These values may be different for your servo
const SERVO_MIN = 0.03;
const SERVO_MAX = 0.085; // was 0.1
 
// create global variable for servo and configure
servo <- hardware.pin7;
servo.configure(PWM_OUT, 0.02, SERVO_MIN); // was 0.02
 

 
// expects a value between -80.0 and 80.0
function SetServoDegrees(value) {
    server.log("Moving servo to : " + value);
    local scaledValue = (value + 81) / 161.0 * (SERVO_MAX-SERVO_MIN) + SERVO_MIN;
    servo.write(scaledValue);
}

SetServoDegrees(0);

agent.on( "sweep.angle", function( passed_value ) {
    
    SetServoDegrees( passed_value );
} );

agent.on( "fan.start", function( passed_value ) {
    server.log("fan on");
    hardware.pin1.write(1);
} );

agent.on( "fan.stop", function( passed_value ) {
    server.log("fan off");
    hardware.pin1.write(0);
} );

agent.on( "heater.on", function( passed_value ) {
    server.log("heater on");
    hardware.pin2.write(1);
} );

agent.on( "heater.off", function( passed_value ) {
    server.log("heater off");
    hardware.pin2.write(0);
} );
 
// variables and declarations for vibration
vibration <- hardware.pin5;
local vibrationCount = 0;
local timeOfLastVibration = 0; // track how long it's been so we don't get 10 events in a row
function vibrationSensed() {
    local state = vibration.read();
    if (state == 1) // vibration rising edge happened
    {
        //server.log("ignoring vibration, millis is " + hardware.millis())
        if(hardware.millis() > (timeOfLastVibration + 500))
        {
            vibrationCount++;
            timeOfLastVibration = hardware.millis();
            server.log("vibration : " + vibrationCount);
        }
    }
}
vibration.configure(DIGITAL_IN, vibrationSensed); // Configure the vibration to call vibrationEvent() when the pin's state changes

// Configure pin 1 as an output for fan control;
hardware.pin1.configure(DIGITAL_OUT);
// Configure pin2 as output for heater control
hardware.pin2.configure(DIGITAL_OUT);

hardware.i2c89.configure(CLOCK_SPEED_100_KHZ);

function readTandH(){ // ... and vibrations
    server.log("reading data");
    local alsAddr = 0x40;
    hardware.i2c89.write(alsAddr<<1,"\xf3");
    imp.sleep(0.07);
    local temp = hardware.i2c89.read(alsAddr<<1, "", 3);
    local rawTemperature = ( temp[0] * 256 ) + temp[1];
	local tempTemperature = rawTemperature / 65536.0; //2^16 = 65536
	local realTemperature = -46.85 + (175.72 * tempTemperature); //From page 14
    
    hardware.i2c89.write(alsAddr<<1,"\xf5");
    imp.sleep(0.07); // was 1, then 0.5
    local hum = hardware.i2c89.read(alsAddr<<1, "", 3);
    local rawHumidity = ( hum[0] * 256 ) + hum[1];

	//sensorStatus = rawHumidity & 0x0003; //Grab only the right two bits
	rawHumidity = rawHumidity >> 2; //Zero out the status bits but keep them in place
	rawHumidity = rawHumidity << 2;
	
	//Given the raw humidity data, calculate the actual relative humidity
	local tempRH = rawHumidity / 65536.0; //2^16 = 65536
	local rh = -6 + (125 * tempRH); //From page 
	
	// manage vibrations
	local localVibrationCount = vibrationCount;
    vibrationCount = 0; // reset vibration counter

    server.log("{\"temp\":" + realTemperature + ",\"hum\":" + tempRH + ",\"vib\":" + localVibrationCount + "}");
    return "{\"temp\":" + realTemperature + ",\"hum\":" + tempRH + ",\"vib\":" + localVibrationCount + "}";
}



agent.on( "temp.read", function( passed_value ) {
    
    agent.send( "temp.readed", readTandH() );
} );


